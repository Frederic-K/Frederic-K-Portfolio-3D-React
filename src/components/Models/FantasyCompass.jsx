/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 scene.gltf --transform 
Files: scene.gltf [68.61KB] > C:\Users\frede\OneDrive\Images\3D models\PortfolioSelected\NEW\career\fantasy_compass-AAA\scene-transformed.glb [1.41MB] (-1950%)
Author: MikoÅ‚aj Michalak (Nillusion) (https://sketchfab.com/M_Michalak)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/fantasy-compass-7dfad2d3bfd447f1be97dace6a967531
Title: Fantasy Compass
*/

import React from "react"
import { useRef, useEffect } from "react"
import { useGLTF, useAnimations } from "@react-three/drei"
import { useFrame } from "@react-three/fiber"
import * as THREE from "three"

const FantasyCompass = React.memo(function FantasyCompass({ animationSpeed = 1, ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF("/models/fantasycompass-transformed.glb")
  const { actions } = useAnimations(animations, group)

  useEffect(() => {
    if (actions) {
      Object.values(actions).forEach((action) => {
        if (action) {
          action.play()
          action.setEffectiveTimeScale(animationSpeed)
          action.loop = THREE.LoopRepeat
          action.repetitions = Infinity
        }
      })

      return () => {
        Object.values(actions).forEach((action) => {
          if (action && action.stop) {
            action.stop()
          }
        })
      }
    }
  }, [actions, animationSpeed])

  useFrame((state) => {
    if (group.current) {
      // Add subtle floating animation
      const floatAmplitude = 0.05 // Adjust this value to control the height of the movement
      const floatFrequency = 1 // Adjust this value to control the speed of the movement
      group.current.position.y = Math.sin(state.clock.elapsedTime * floatFrequency) * floatAmplitude
    }
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group
          name="Compass001"
          position={[0.009, 0.016, 0.007]}
          rotation={[-0.886, -0.387, 0.291]}
        >
          <group name="Cylinder130">
            <mesh
              name="Cylinder130__0"
              geometry={nodes.Cylinder130__0.geometry}
              material={materials["Cylinder.128__0"]}
            />
          </group>
          <group name="Cylinder129" rotation={[0, 0, 0.895]}>
            <mesh
              name="Cylinder129__0"
              geometry={nodes.Cylinder129__0.geometry}
              material={materials["Cylinder.128__0"]}
            />
          </group>
          <group name="Cylinder131" position={[0.359, 0, 0.061]}>
            <mesh
              name="Cylinder131__0"
              geometry={nodes.Cylinder131__0.geometry}
              material={materials["Cylinder.128__0"]}
            />
          </group>
        </group>
        <mesh
          name="Cube013_Crystal_0"
          geometry={nodes.Cube013_Crystal_0.geometry}
          material={materials.Crystal}
          position={[-0.288, 0.103, -0.183]}
          rotation={[-0.886, -0.387, 0.291]}
        />
        <mesh
          name="Cylinder128__0"
          geometry={nodes.Cylinder128__0.geometry}
          material={materials["Cylinder.128__0"]}
          position={[0.007, 0.019, 0.01]}
          rotation={[-0.886, -0.387, 0.291]}
        />
        <mesh
          name="Cylinder127_Material_0"
          geometry={nodes.Cylinder127_Material_0.geometry}
          material={materials.Material}
          position={[-0.417, 0.225, -0.523]}
          rotation={[-0.886, -0.387, 0.291]}
        />
        <mesh
          name="Circle006_Glass_0"
          geometry={nodes.Circle006_Glass_0.geometry}
          material={materials.Glass}
          position={[-0.035, 0.098, 0.075]}
          rotation={[-0.886, -0.387, 0.291]}
        />
      </group>
    </group>
  )
})

export default FantasyCompass
useGLTF.preload("/models/fantasycompass-transformed.glb")
